import{_ as e,c as o,o as l,ah as s,aI as t,aJ as r,aK as i,aL as p,aM as n,aN as d,aO as c,aP as m,aQ as h,aR as _,aS as g,aT as b,aU as y,aV as u,aW as v,aX as f,aY as T,aZ as S,a_ as z,a$ as D,b0 as k,b1 as P,b2 as $,b3 as x}from"./chunks/framework.DZmKp_jX.js";const J=JSON.parse('{"title":"浏览器 DevTools（开发人员工具）部分实用功能介绍","description":"","frontmatter":{"title":"浏览器 DevTools（开发人员工具）部分实用功能介绍","date":"2025-03-16T15:54:20.000Z","lastmod":"2025-03-16T15:58:30.000Z","tags":["Chromium","Chrome","浏览器","工具","Web 前端","DevTools"]},"headers":[],"relativePath":"content/chromium-dev-tools.md","filePath":"content/chromium-dev-tools.md"}'),C={name:"content/chromium-dev-tools.md"};function E(M,a,N,R,q,w){return l(),o("div",null,[...a[0]||(a[0]=[s('<h1 id="浏览器-devtools-开发人员工具-部分实用功能介绍" tabindex="-1">浏览器 DevTools（开发人员工具）部分实用功能介绍 <a class="header-anchor" href="#浏览器-devtools-开发人员工具-部分实用功能介绍" aria-label="Permalink to “浏览器 DevTools（开发人员工具）部分实用功能介绍”">​</a></h1><blockquote><p>浏览器的 DevTools（开发人员工具）是在前端开发中常用到的工具，其中的 Elements（元素）、Console（控制台）、Sources（源代码）以及 Network（网络）是最常用的四个模块。这里主要介绍最常见的修改网页文本功能以及一些比较实用的功能。</p></blockquote><h2 id="修改网页内容" tabindex="-1">修改网页内容 <a class="header-anchor" href="#修改网页内容" aria-label="Permalink to “修改网页内容”">​</a></h2><p>这是最基础和最简单的用法，只需要点击左上角的“选择元素”按钮，然后在页面上点击需要修改的元素，即可在 DevTools 的 Elements（元素）页面对其进行修改。</p><p><img src="'+t+'" alt="" loading="lazy"><br> ​<img src="'+r+'" alt="" loading="lazy"><br> ​<img src="'+i+'" alt="" loading="lazy"></p><h2 id="设备模拟" tabindex="-1">设备模拟 <a class="header-anchor" href="#设备模拟" aria-label="Permalink to “设备模拟”">​</a></h2><p>在开发响应式页面或为页面适配移动端时常用的一个功能，点击左上角的“Toggle device emulation”按钮即可启用。</p><p><img src="'+p+'" alt="" loading="lazy"></p><p>可以在右侧的“More options”下拉菜单中打开默认隐藏的功能：</p><p>media queries（媒体查询）、rules（标尺）、device pixel ratio（DPR）、device type（设备类型）</p><p><img src="'+n+'" alt="" loading="lazy"></p><p>在左侧的“Dimensions”下拉菜单中可以快速切换到一些预置的设备分辨率：</p><p><img src="'+d+'" alt="" loading="lazy"></p><h2 id="console-控制台" tabindex="-1">Console（控制台） <a class="header-anchor" href="#console-控制台" aria-label="Permalink to “Console（控制台）”">​</a></h2><p>DevTools 的 Console 是在开发过程中常用的功能之一，在其中可以进行计算（小数有浮点精度问题）、执行 JavaScript 代码等操作。</p><h3 id="_0" tabindex="-1">$0 <a class="header-anchor" href="#_0" aria-label="Permalink to “$0”">​</a></h3><p>在 DevTools 的 Elements 面板中选中 DOM 节点后，可以看到它的后方显示 <code>== $0</code>：</p><p><img src="'+c+'" alt="" loading="lazy"></p><p>实际上，<code>$0</code> 是对当前选中的 DOM 节点的引用。</p><p>除此之外，<code>$1</code> 是对上一次选择的 DOM 节点的引用，一直到 <code>$4</code>。</p><p><img src="'+m+'" alt="" loading="lazy"></p><h3 id="和" tabindex="-1">$ 和 $$ <a class="header-anchor" href="#和" aria-label="Permalink to “$ 和 $$”">​</a></h3><p>在默认情况下（没有定义过 <code>$</code> 变量），它在 Console 中是 <code>document.querySelector</code> 的别名。</p><p><img src="'+h+'" alt="" loading="lazy"></p><p>而 <code>$$</code> 则类似 <code>document.QuerySelectorAll</code>，但它返回的是包含 DOM 节点的数组，而不是 NodeList。</p><p><img src="'+_+'" alt="" loading="lazy"></p><h3 id="" tabindex="-1">$_ <a class="header-anchor" href="#" aria-label="Permalink to “$_”">​</a></h3><p>在 Console 中，可以通过 <code>$_</code> 快速引用最后一次的执行结果：</p><p><img src="'+g+'" alt="" loading="lazy"></p><h2 id="elements-元素" tabindex="-1">Elements（元素） <a class="header-anchor" href="#elements-元素" aria-label="Permalink to “Elements（元素）”">​</a></h2><h3 id="toggle-element-state-切换元素状态" tabindex="-1">Toggle Element State（切换元素状态） <a class="header-anchor" href="#toggle-element-state-切换元素状态" aria-label="Permalink to “Toggle Element State（切换元素状态）”">​</a></h3><p>通过该功能，可以切换元素的不同状态（focus、hover 等），在为元素的不同状态设置样式时比较方便。</p><p><img src="'+b+'" alt="" loading="lazy"></p><h3 id="element-classes-元素类名" tabindex="-1">Element Classes（元素类名） <a class="header-anchor" href="#element-classes-元素类名" aria-label="Permalink to “Element Classes（元素类名）”">​</a></h3><p>可以快速地对元素进行添加类名、开启类名、关闭类名操作，预览效果。</p><p><img src="'+y+'" alt="" loading="lazy"></p><h3 id="new-style-rule-添加样式规则" tabindex="-1">New Style Rule（添加样式规则） <a class="header-anchor" href="#new-style-rule-添加样式规则" aria-label="Permalink to “New Style Rule（添加样式规则）”">​</a></h3><p>可用于临时添加样式规则，点击后会自动添加对于选中的元素的选择器。</p><p><img src="'+u+'" alt="" loading="lazy"></p><h3 id="copy" tabindex="-1">Copy <a class="header-anchor" href="#copy" aria-label="Permalink to “Copy”">​</a></h3><p>右键点击一个元素，可在右键菜单的“Copy”项中复制对于该元素的 CSS 选择器（Copy selector）或 JavaScript 路径（Copy JS path）。</p><p><img src="'+v+'" alt="" loading="lazy"></p><p>Copy selector：<code>#head_wrapper &gt; div &gt; div</code><br> Copy JS path：<code>document.querySelector(&quot;#head_wrapper &gt; div &gt; div&quot;)</code>​</p><h2 id="sources-源代码" tabindex="-1">Sources（源代码） <a class="header-anchor" href="#sources-源代码" aria-label="Permalink to “Sources（源代码）”">​</a></h2><h3 id="filesystem-文件系统" tabindex="-1">Filesystem（文件系统） <a class="header-anchor" href="#filesystem-文件系统" aria-label="Permalink to “Filesystem（文件系统）”">​</a></h3><p>在“Filesystem”中添加本地文件夹：</p><p><img src="'+f+'" alt="" loading="lazy"></p><p>之后就可以在 DevTools 中修改本地文件并保存（需要手动保存）。</p><p><img src="'+T+'" alt="" loading="lazy"></p><p>不过，只支持实时预览样式文件的修改。</p><p><img src="'+S+'" alt="" loading="lazy"></p><h3 id="snippets-代码片段" tabindex="-1">Snippets（代码片段） <a class="header-anchor" href="#snippets-代码片段" aria-label="Permalink to “Snippets（代码片段）”">​</a></h3><p>可以在这里添加常用的代码片段，用于复制或执行（在右键菜单中点击“Run”）。</p><p><img src="'+z+'" alt="" loading="lazy"></p><p>DevTools 代码片段合集：<a href="http://bgrins.github.io/devtools-snippets/" target="_blank" rel="noreferrer">DevTools Snippets</a></p><h2 id="保持页面聚焦" tabindex="-1">保持页面聚焦 <a class="header-anchor" href="#保持页面聚焦" aria-label="Permalink to “保持页面聚焦”">​</a></h2><p>点击 DevTools 标签栏中的加号（More Tools），选择其中的“Rendering”。</p><p><img src="'+D+'" alt="" loading="lazy"></p><p>勾选页面中的“Emulate a focused page”。</p><p><img src="'+k+'" alt="" loading="lazy"></p><p>之后网页会被模拟为聚焦状态，即使它不在前台。此时执行 <code>document.hasFocus()</code> 会返回 <code>true</code>。通过该功能，可以阻止大部分网站检测用户是否离开页面。</p><h2 id="截屏" tabindex="-1">截屏 <a class="header-anchor" href="#截屏" aria-label="Permalink to “截屏”">​</a></h2><p>点击 DevTools 右上角的下拉菜单按钮，点击其中的“Run command”（也可以直接使用快捷键），打开命令面板。</p><p><img src="'+P+'" alt="" loading="lazy"></p><p>然后输入“shot”或“screenshot”，之后可以看到以下几个选项：</p><p><img src="'+$+'" alt="" loading="lazy"></p><p>依次分别为：</p><ul><li>截取指定区域</li><li>截取完整页面</li><li>截取选中的 DOM 节点</li><li>截取当前页面</li></ul><p>可以通过“箭头”键和“Enter”键或鼠标点击进行操作，截屏完成后会在“下载”中显示。</p><p><img src="'+x+'" alt="" loading="lazy"></p><p>‍</p>',71)])])}const A=e(C,[["render",E]]);export{J as __pageData,A as default};
