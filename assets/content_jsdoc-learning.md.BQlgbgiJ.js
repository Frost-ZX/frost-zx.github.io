import{_ as s,c as i,o as e,ah as n}from"./chunks/framework.ByubJJ5I.js";const o=JSON.parse('{"title":"「JavaScript」JSDoc 学习记录","description":"","frontmatter":{"title":"「JavaScript」JSDoc 学习记录","date":"2025-03-15T23:19:54.000Z","lastmod":"2025-03-15T23:25:49.000Z","tags":["JavaScript","Web 前端","学习","记录"]},"headers":[],"relativePath":"content/jsdoc-learning.md","filePath":"content/jsdoc-learning.md"}'),t={name:"content/jsdoc-learning.md"};function l(p,a,h,r,k,d){return e(),i("div",null,[...a[0]||(a[0]=[n(`<h1 id="「javascript」jsdoc-学习记录" tabindex="-1">「JavaScript」JSDoc 学习记录 <a class="header-anchor" href="#「javascript」jsdoc-学习记录" aria-label="Permalink to “「JavaScript」JSDoc 学习记录”">​</a></h1><h2 id="信息" tabindex="-1">信息 <a class="header-anchor" href="#信息" aria-label="Permalink to “信息”">​</a></h2><h3 id="deprecated" tabindex="-1">@deprecated <a class="header-anchor" href="#deprecated" aria-label="Permalink to “@deprecated”">​</a></h3><h4 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to “简介”">​</a></h4><p>用于将函数、属性等内容标记为不推荐使用。</p><h4 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to “参考”">​</a></h4><ul><li><a href="https://jsdoc.app/tags-deprecated.html" target="_blank" rel="noreferrer">Use JSDoc: @deprecated</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#deprecated" target="_blank" rel="noreferrer">TypeScript: Documentation</a></li></ul><h3 id="description" tabindex="-1">@description <a class="header-anchor" href="#description" aria-label="Permalink to “@description”">​</a></h3><h4 id="简介-1" tabindex="-1">简介 <a class="header-anchor" href="#简介-1" aria-label="Permalink to “简介”">​</a></h4><p>用于给变量、函数等内容添加说明信息。</p><h4 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to “语法”">​</a></h4><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>@description &lt;说明内容&gt;</span></span>
<span class="line"><span>@desc &lt;说明内容&gt;</span></span></code></pre></div><h4 id="参考-1" tabindex="-1">参考 <a class="header-anchor" href="#参考-1" aria-label="Permalink to “参考”">​</a></h4><ul><li><a href="https://jsdoc.app/tags-description.html" target="_blank" rel="noreferrer">Use JSDoc: @description</a></li></ul><h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to “类型”">​</a></h2><h3 id="callback" tabindex="-1">@callback <a class="header-anchor" href="#callback" aria-label="Permalink to “@callback”">​</a></h3><h4 id="简介-2" tabindex="-1">简介 <a class="header-anchor" href="#简介-2" aria-label="Permalink to “简介”">​</a></h4><p>与 <code>@typedef</code> 类似，但它主要用于描述函数。</p><h4 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to “语法”">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@callback</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExampleFunction</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [index]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><h4 id="参考-2" tabindex="-1">参考 <a class="header-anchor" href="#参考-2" aria-label="Permalink to “参考”">​</a></h4><ul><li><a href="https://jsdoc.app/tags-callback.html" target="_blank" rel="noreferrer">Use JSDoc: @callback</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#typedef-callback-and-param" target="_blank" rel="noreferrer">TypeScript: Documentation</a></li></ul><h3 id="param" tabindex="-1">@param <a class="header-anchor" href="#param" aria-label="Permalink to “@param”">​</a></h3><h4 id="简介-3" tabindex="-1">简介 <a class="header-anchor" href="#简介-3" aria-label="Permalink to “简介”">​</a></h4><p>与 <code>@type</code> 类似，但它用于描述函数的参数类型。</p><h4 id="语法-2" tabindex="-1">语法 <a class="header-anchor" href="#语法-2" aria-label="Permalink to “语法”">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.prop1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.prop2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options.prop3]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="参考-3" tabindex="-1">参考 <a class="header-anchor" href="#参考-3" aria-label="Permalink to “参考”">​</a></h4><ul><li><a href="https://jsdoc.app/tags-param.html" target="_blank" rel="noreferrer">Use JSDoc: @param</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#typedef-callback-and-param" target="_blank" rel="noreferrer">TypeScript: Documentation</a></li></ul><h3 id="template" tabindex="-1">@template <a class="header-anchor" href="#template" aria-label="Permalink to “@template”">​</a></h3><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to “示例”">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TData</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@typedef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  {object}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ResObject</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  code</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {TData}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   data</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  message</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TData</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@typedef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ResPromise</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> { import(&#39;axios&#39;).AxiosPromise&lt;ResObject&lt;TData&gt;&gt; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><h4 id="参考-4" tabindex="-1">参考 <a class="header-anchor" href="#参考-4" aria-label="Permalink to “参考”">​</a></h4><ul><li><a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#template" target="_blank" rel="noreferrer">TypeScript: Documentation</a></li></ul><h3 id="type" tabindex="-1">@type <a class="header-anchor" href="#type" aria-label="Permalink to “@type”">​</a></h3><h4 id="简介-4" tabindex="-1">简介 <a class="header-anchor" href="#简介-4" aria-label="Permalink to “简介”">​</a></h4><p>用于描述对象的类型。</p><h4 id="语法-3" tabindex="-1">语法 <a class="header-anchor" href="#语法-3" aria-label="Permalink to “语法”">​</a></h4><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>@type {类型名称}</span></span></code></pre></div><p><strong>类型名称（名称表达式）</strong></p><blockquote><p>指定一个类型名称。</p></blockquote><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>{boolean}</span></span>
<span class="line"><span>{number}</span></span>
<span class="line"><span>{string}</span></span>
<span class="line"><span>{HTMLElement}</span></span>
<span class="line"><span>{myNamespace.MyClass}</span></span></code></pre></div><p><strong>多个类型</strong></p><blockquote><p>使用括号包括，使用 <code>|</code> 分隔多个类型。<br> 表示值可能是几种类型中的一种。</p></blockquote><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>{(boolean|number)}</span></span></code></pre></div><p><strong>数组和对象</strong></p><blockquote><p>JSDoc 支持 Closure Compiler 语法定义的数组和对象类型。<br> 可以在类型名称的后方添加 <code>[]</code>​ 描述数组项的类型。例如 <code>string[]</code> 表示字符串数组。<br> 对于具有已知的属性的对象，可以使用 Closure Compiler 语法描述类型。可以分别描述每个属性，以便为每个属性指定更详细的信息。</p></blockquote><p>一个保存 MyClass 实例对象的数组：</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>{Array.&lt;MyClass&gt;}</span></span>
<span class="line"><span>{MyClass[]}</span></span></code></pre></div><p>一个 key 类型为 string，值类型为 number 的对象：</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>{Object.&lt;string, number&gt;}</span></span></code></pre></div><p>一个类数组对象：</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>{Object.&lt;number, object&gt;}</span></span></code></pre></div><p>一个名称为 <code>myObj</code>​，包含属性 <code>a</code>​（number）和 <code>b</code>（任意类型）的对象：</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>{{a: number, b: string, c}} myObj</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{Object} myObj</span></span>
<span class="line"><span>{number} myObj.a</span></span>
<span class="line"><span>{*} myObj.b</span></span></code></pre></div><p><strong>导入类型</strong></p><blockquote><p>可以使用 <code>import</code> 导入其他文件中的类型。<br> 注意：此语法是特定于 TypeScript 的，不同于 JSDoc 标准。</p></blockquote><p>从文件 <code>types.js</code>​ 中导入 <code>Example</code> 类型</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>{ import(&quot;./types&quot;).Example }</span></span></code></pre></div><h4 id="参考-5" tabindex="-1">参考 <a class="header-anchor" href="#参考-5" aria-label="Permalink to “参考”">​</a></h4><ul><li><a href="https://jsdoc.app/tags-type.html" target="_blank" rel="noreferrer">Use JSDoc: @type</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#type" target="_blank" rel="noreferrer">TypeScript: Documentation</a></li></ul><h3 id="typedef" tabindex="-1">@typedef <a class="header-anchor" href="#typedef" aria-label="Permalink to “@typedef”">​</a></h3><h4 id="简介-5" tabindex="-1">简介 <a class="header-anchor" href="#简介-5" aria-label="Permalink to “简介”">​</a></h4><p>用于描述一个自定义的类型。</p><h4 id="语法-4" tabindex="-1">语法 <a class="header-anchor" href="#语法-4" aria-label="Permalink to “语法”">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@typedef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  {object}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExampleType</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 定义一个名称为 ExampleType 的类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prop1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 一个 string 类型的属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prop2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 一个 number 类型的属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [prop3]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 一个 number 类型的可选属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><h4 id="参考-6" tabindex="-1">参考 <a class="header-anchor" href="#参考-6" aria-label="Permalink to “参考”">​</a></h4><ul><li><a href="https://jsdoc.app/tags-typedef.html" target="_blank" rel="noreferrer">Use JSDoc: @typedef</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#typedef-callback-and-param" target="_blank" rel="noreferrer">TypeScript: Documentation</a></li></ul><p>‍</p>`,69)])])}const g=s(t,[["render",l]]);export{o as __pageData,g as default};
